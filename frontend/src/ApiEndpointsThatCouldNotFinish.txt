  const [
    createListMutation,
    { createListLoader, createListError, createListData },
  ] = useMutation(CREATE_LIST);
  const [
    updateListMutation,
    { updateListLoader, updateListError, updateListData },
  ] = useMutation(UPDATE_LIST);

  const [
    deleteListMutation,
    { deleteListLoader, deleteListError, deleteListData },
  ] = useMutation(DELETE_LIST);
  const [
    addTaskToListMutation,
    { addTaskToListLoader, addTaskToListError, addTaskToListData },
  ] = useMutation(ADD_TASK_TO_LIST);
  const listNameX = "List tests update";
  const listDescriptionX = "List tests description";
  const listIdX = "64766fc6adaa28eccd2afdc9";
  const taskIdx = "64754093d29c0c0dbc7cb7f0";

  const testListMutations = () => {
    // handleCreateList();

    // handleDeleteList();
    // handleUpdateList();
    handleAddTaskToList();
  };
  const handleCreateList = () => {
    createListMutation({
      variables: {
        name: listNameX,
        description: listDescriptionX,
      },
    })
      .then((result) => {
        const updatedUser = result.data?.createList;
        //user returned like on user.mutation
        console.log(updatedUser);
        displayNotification("List Added successfully", false);
      })
      .catch((error) => {
        console.log(error);
      });
  };

  const handleDeleteList = () => {
    deleteListMutation({
      variables: {
        id: listIdX,
      },
    })
      .then((result) => {
        const updatedUser = result.data?.deleteList;
        //user returned like on user.mutation
        console.log(updatedUser);
        displayNotification("List Deleted successfully", false);
      })
      .catch((error) => {
        console.log(error);
      });
  };

  const handleUpdateList = () => {
    updateListMutation({
      variables: {
        id: listIdX,
        name: listNameX,
        description: listDescriptionX,
      },
    })
      .then((result) => {
        const updateTask = result.data?.updateList;
        //user returned like on user.mutation
        console.log(updateTask);
        displayNotification("Task deleted updated successfully", false);
      })
      .catch((error) => {
        console.log(error);
      });
  };

  const handleAddTaskToList = () => {
    addTaskToListMutation({
      variables: {
        taskId: taskIdx,
        listId: listIdX,
      },
    })
      .then((result) => {
        const updateTask = result.data?.addTaskToList;

        displayNotification("Task added to list successfully", !updateTask);
      })
      .catch((error) => {
        displayNotification("Could not add task to list", true);
      });
  };

    //TASK TESTING
  const [
    createTaskMutation,
    { loading: createTaskLoading, error: createTaskError },
  ] = useMutation(CREATE_TASK);

  // Update Task mutation
  const [
    updateTaskMutation,
    { loading: updateTaskLoading, error: updateTaskError },
  ] = useMutation(UPDATE_TASK);

  // Delete Task mutation
  const [
    deleteTaskMutation,
    { loading: deleteTaskLoading, error: deleteTaskError },
  ] = useMutation(DELETE_TASK);

  // Add Subtask mutation
  const [
    addSubtaskMutation,
    { loading: addSubtaskLoading, error: addSubtaskError },
  ] = useMutation(ADD_SUBTASK);

const titleX = "Task title";
const descriptionX = "Task description";
const dueDateX = "2023-05-30T20:45:55.200Z";
const listIdX = "647541bdb7f55ba186b8aa6b";

const handleCreateTask = () => {
  createTaskMutation({
    variables: {
      title: titleX,
      description: descriptionX,
      dueDate: dueDateX,
      listId: listIdX,
    },
  })
    .then((result) => {
      const updatedUser = result.data?.createdTask;
      //user returned like on user.mutation
      console.log(updatedUser);
      displayNotification("User updated successfully", false);
    })
    .catch((error) => {
      console.log(error);
    });
};

const taskId = "6476610e4434f39674397f40";
const handleDeleteTask = () => {
  deleteTaskMutation({
    variables: {
      id: taskId,
    },
  })
    .then((result) => {
      const deleteTask = result.data?.deleteTask;
      //user returned like on user.mutation
      console.log(deleteTask);
      displayNotification("Task deleted updated successfully", false);
    })
    .catch((error) => {
      console.log(error);
    });
};

const handleUpdateTask = () => {
  updateTaskMutation({
    variables: {
      id: taskId,
      title: titleX,
      description: descriptionX,
      dueDate: dueDateX,
      completed: true,
    },
  })
    .then((result) => {
      const updateTask = result.data?.updateTask;
      //user returned like on user.mutation
      console.log(updateTask);
      displayNotification("Task deleted updated successfully", false);
    })
    .catch((error) => {
      console.log(error);
    });
};

const subtaskTitle = "Subtask title";
const subtaskDescription = "Subtask description";

const handleAddSubtask = () => {
  addSubtaskMutation({
    variables: {
      parentId: taskId,
      title: subtaskTitle,
      description: subtaskDescription,
      dueDate: dueDateX,
    },
  })
    .then((result) => {
      const updateTask = result.data?.addSubTask;
      //user returned like on user.mutation
      console.log(updateTask);
      displayNotification("Subtask Added successfully", false);
    })
    .catch((error) => {
      console.log(error);
    });
};

const testTaskMutations = () => {
  // handleCreateTask();

  // handleDeleteTask();
  // handleUpdateTask();
  handleAddSubtask();
};